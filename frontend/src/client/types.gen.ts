// This file is auto-generated by @hey-api/openapi-ts

/**
 * Agent
 */
export type Agent = {
    /**
     * Agent Id
     * Unique identifier of the model.
     */
    agent_id: string;
    /**
     * Agent Version
     * Version of the agent.
     */
    agent_version: number;
    /**
     * Department Name
     * Department to which the agent belongs.
     */
    department_name: 'Common' | 'HR' | 'Sales' | 'Marketing' | 'CustomerSupport' | 'Finance' | 'Planning' | 'BusinessSupport' | 'ProductDevelopment' | 'InternationalSales';
    /**
     * Name
     * Username of the user.
     */
    name: string;
    /**
     * Description
     * Description of the agent, if available.
     */
    description: string;
    /**
     * Tags
     * List of tags associated with the agent.
     */
    tags?: Array<string>;
    /**
     * Icon Link
     * Link to the user's icon or avatar, if available.
     */
    icon_link?: string | null;
    /**
     * Created At
     * Timestamp when the agent was created.
     */
    created_at: string;
    /**
     * Updated At
     * Timestamp when the agent was last updated.
     */
    updated_at: string;
};

/**
 * AgentDetail
 */
export type AgentDetail = {
    /**
     * Agent Id
     * Unique identifier of the model.
     */
    agent_id: string;
    /**
     * Agent Version
     * Version of the agent.
     */
    agent_version: number;
    /**
     * Department Name
     * Department to which the agent belongs.
     */
    department_name: 'Common' | 'HR' | 'Sales' | 'Marketing' | 'CustomerSupport' | 'Finance' | 'Planning' | 'BusinessSupport' | 'ProductDevelopment' | 'InternationalSales';
    /**
     * Name
     * Username of the user.
     */
    name: string;
    /**
     * Description
     * Description of the agent, if available.
     */
    description: string;
    /**
     * Tags
     * List of tags associated with the agent.
     */
    tags?: Array<string>;
    /**
     * Icon Link
     * Link to the user's icon or avatar, if available.
     */
    icon_link?: string | null;
    /**
     * Created At
     * Timestamp when the agent was created.
     */
    created_at: string;
    /**
     * Updated At
     * Timestamp when the agent was last updated.
     */
    updated_at: string;
    /**
     * Author Name
     * Name of the author of the agent.
     */
    author_name?: string | null;
    /**
     * Prompt
     * Prompt or instructions for the agent, if available.
     */
    prompt?: string | null;
    /**
     * Output Schema
     * Output schema for the agent's responses.
     */
    output_schema?: Array<Attribute> | null;
};

/**
 * AgentMarketPlace
 */
export type AgentMarketPlace = {
    /**
     * Agent Id
     * Unique identifier of the model.
     */
    agent_id: string;
    /**
     * Agent Version
     * Version of the agent.
     */
    agent_version: number;
    /**
     * Name
     * Username of the user.
     */
    name: string;
    /**
     * Tags
     * List of tags associated with the agent.
     */
    tags?: Array<string>;
    /**
     * Icon Link
     * Link to the user's icon or avatar, if available.
     */
    icon_link?: string | null;
    /**
     * Department Name
     * Department to which the agent belongs.
     */
    department_name: 'Common' | 'HR' | 'Sales' | 'Marketing' | 'CustomerSupport' | 'Finance' | 'Planning' | 'BusinessSupport' | 'ProductDevelopment' | 'InternationalSales';
};

/**
 * AgentPublish
 */
export type AgentPublish = {
    /**
     * Agent Id
     * Unique identifier of the agent. If not provided, a new ID will be generated.
     */
    agent_id?: string | null;
    /**
     * Name
     * Name of the agent.
     */
    name: string;
    /**
     * Icon Link
     * Link to the agent's icon or avatar, if available.
     */
    icon_link?: string | null;
    /**
     * Tags
     * List of tags associated with the agent.
     */
    tags?: Array<string>;
    /**
     * Description
     * Description of the agent, if available.
     */
    description: string;
    /**
     * Prompt
     * Prompt or instructions for the agent.
     */
    prompt: string;
    /**
     * Department Name
     * Name of the department to which the agent belongs.
     */
    department_name: 'Common' | 'HR' | 'Sales' | 'Marketing' | 'CustomerSupport' | 'Finance' | 'Planning' | 'BusinessSupport' | 'ProductDevelopment' | 'InternationalSales';
    /**
     * Output Schema
     * Output schema for the agent's responses. if not provided, it will be raw string
     */
    output_schema?: Array<Attribute> | null;
};

/**
 * AgentRecommendation
 */
export type AgentRecommendation = {
    /**
     * Department Name
     * Name of the department to which the agent belongs.
     */
    department_name: 'Common' | 'HR' | 'Sales' | 'Marketing' | 'CustomerSupport' | 'Finance' | 'Planning' | 'BusinessSupport' | 'ProductDevelopment' | 'InternationalSales';
    /**
     * Agents
     * List of agents associated with the recommendation.
     */
    agents?: Array<Agent>;
};

/**
 * AgentRequest
 */
export type AgentRequest = {
    /**
     * Agent Id
     * Unique identifier of the agent.
     */
    agent_id: string;
    /**
     * Agent Version
     * Version of the agent.
     */
    agent_version: number;
    /**
     * Department Id
     * ID of the department to which the agent belongs, if applicable.
     */
    department_id?: string | null;
};

/**
 * Attribute
 * Represents an attribute for the output schema of an agent's response.
 */
export type Attribute = {
    /**
     * Attribute
     * attribute for the output schema
     */
    attribute: string;
    /**
     * Type
     * type of the output schema, e.g., 'str', 'int', 'float', 'bool'.
     */
    type: string;
};

/**
 * BaseResponse
 * Base response model for API responses.
 */
export type BaseResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
};

/**
 * Body_upload_file_api_v1_files_upload_post
 */
export type BodyUploadFileApiV1FilesUploadPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Content
 * Content model for messages
 */
export type Content = {
    /**
     * Type
     * Type of the message content, e.g., 'text'.
     */
    type?: 'text' | 'image' | 'file';
    /**
     * Parts
     * List of parts that make up the message content.
     */
    parts?: Array<string>;
};

/**
 * ConversationMaster
 */
export type ConversationMaster = {
    /**
     * Conversation Id
     * Unique identifier of the model.
     */
    conversation_id: string;
    /**
     * Title
     * Username of the user.
     */
    title: string;
    /**
     * Icon
     * Link to the user's icon or avatar, if available.
     */
    icon?: string | null;
    /**
     * Created At
     * Creation timestamp of the conversation.
     */
    created_at: string;
    /**
     * Updated At
     * Last updated timestamp of the conversation.
     */
    updated_at: string;
};

/**
 * CreateConversationResponse
 * POST /api/v1/conversation/new Response model
 */
export type CreateConversationResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Conversation Id
     * ID of the newly created conversation.
     */
    conversation_id: string;
    /**
     * Parent Message Id
     * Parent message ID for the conversation, if applicable.
     */
    parent_message_id?: null;
};

/**
 * DeleteFilesByIDResponse
 */
export type DeleteFilesByIdResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * File Id
     * ID of the deleted file.
     */
    file_id: string;
};

/**
 * DeleteRecommendationResponse
 * DELETE /api/v1/recommendations/{recommendation_id} Response model
 */
export type DeleteRecommendationResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Recommendation Id
     * ID of the deleted recommendation.
     */
    recommendation_id: string;
};

/**
 * File
 */
export type File = {
    /**
     * File Id
     * Unique identifier of the file.
     */
    file_id: string;
    /**
     * File Path
     * Path to the file.
     */
    file_path: string;
    /**
     * File Name
     * Name of the file.
     */
    file_name: string;
    /**
     * File Size
     * Size of the file in bytes.
     */
    file_size: number;
    /**
     * File Extension
     * Extension of the file.
     */
    file_extension: string;
    /**
     * File Content Type
     * Content type of the file.
     */
    file_content_type: string;
    /**
     * Author Name
     * ID of the user who uploaded the file.
     */
    author_name: string;
    /**
     * Vectorizing Status
     * Status of the vectorization process. RED: Failed to vectorize, YELLOW: In progress, GREEN: Succeeded, GRAY: Not started
     */
    vectorizing_status: 'red' | 'yellow' | 'green' | 'gray';
    /**
     * Created At
     * Timestamp when the file was created.
     */
    created_at?: string;
    /**
     * Updated At
     * Timestamp when the file was last updated.
     */
    updated_at?: string;
};

/**
 * GetAgentResponse
 * GET /api/v1/agents/{agent_id} Response model
 */
export type GetAgentResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Details of the requested agent.
     */
    agent: AgentDetail;
};

/**
 * GetAvailableAgentsResponse
 * GET /api/v1/agents Response model
 */
export type GetAvailableAgentsResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Agents
     * List of available agents.
     */
    agents?: Array<AgentMarketPlace>;
    /**
     * Total
     * Total number of agents matching the query.
     */
    total: number;
    /**
     * Page
     * Current page number.
     */
    page: number;
    /**
     * Size
     * Number of items per page.
     */
    size: number;
    /**
     * Has Next
     * Whether there is a next page.
     */
    has_next: boolean;
};

/**
 * GetConversationResponse
 * GET /api/v1/conversation, /api/v1/recommendation/{recommendation_id}/conversations Response model
 */
export type GetConversationResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * List of conversations associated with the user.
     */
    conversation: ConversationMaster;
    /**
     * Messages
     * List of messages in the conversation.
     */
    messages?: Array<MessageResponse>;
};

/**
 * GetConversationsResponse
 * GET /api/v1/conversations Response model
 */
export type GetConversationsResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Conversations
     * List of conversations associated with the user.
     */
    conversations?: Array<ConversationMaster>;
};

/**
 * GetFilesResponse
 * GET /api/v1/files Response model
 */
export type GetFilesResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Files
     * List of files uploaded by the user.
     */
    files?: Array<File>;
};

/**
 * GetMeResponse
 * GET /api/v1/user Response model
 */
export type GetMeResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * User information model containing details about the current user.
     */
    user: User;
    /**
     * Llms
     * List of model IDs that the user has access to.
     */
    llms?: Array<LlmModel>;
};

/**
 * GetRecommendationByIDResponse
 * GET /api/v1/recommendations/{recommendation_id} Response model
 */
export type GetRecommendationByIdResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Details of the requested recommendation.
     */
    recommendation: Recommendation;
};

/**
 * GetRecommendationsResponse
 * GET /api/v1/recommendations Response model
 */
export type GetRecommendationsResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Total
     * Total number of tools matching the query.
     */
    total: number;
    /**
     * Page
     * Current page number.
     */
    page: number;
    /**
     * Size
     * Number of items per page.
     */
    size: number;
    /**
     * Has Next
     * Whether there is a next page.
     */
    has_next: boolean;
    /**
     * Recommendations
     * List of recommended tools for the user.
     */
    recommendations?: Array<RecommendationMaster>;
};

/**
 * GetToolByIDResponse
 * GET /api/v1/tools/{tool_id} Response model
 */
export type GetToolByIdResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Details of the requested tool.
     */
    tool: Tool;
};

/**
 * GetToolsResponse
 * GET /api/v1/tools Response model
 */
export type GetToolsResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Tools
     * List of available tools.
     */
    tools?: Array<ToolMaster>;
    /**
     * Total
     * Total number of tools matching the query.
     */
    total: number;
    /**
     * Page
     * Current page number.
     */
    page: number;
    /**
     * Size
     * Number of items per page.
     */
    size: number;
    /**
     * Has Next
     * Whether there is a next page.
     */
    has_next: boolean;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LLMModel
 */
export type LlmModel = {
    /**
     * Issuer
     * The issuer of the LLM model, e.g., 'openai', 'anthropic'.
     */
    issuer: string;
    /**
     * Deployment Id
     * Deployment identifier for the model.
     */
    deployment_id: string;
    /**
     * Name
     * Username of the user.
     */
    name: string;
    /**
     * Description
     * Description of the model, if available.
     */
    description: string;
    /**
     * Icon Link
     * Link to the user's icon or avatar, if available.
     */
    icon_link?: string | null;
};

/**
 * LLMModelRequest
 * Request model for LLM model operations.
 */
export type LlmModelRequest = {
    /**
     * Issuer
     * The issuer of the LLM model, e.g., 'openai', 'anthropic'.
     */
    issuer: string;
    /**
     * Deployment Id
     * Deployment identifier for the model.
     */
    deployment_id: string;
};

/**
 * MessageRequest
 */
export type MessageRequest = {
    content: Content;
};

/**
 * MessageResponse
 * Message model representing a single message in a conversation.
 */
export type MessageResponse = {
    /**
     * Message Id
     * Unique identifier of the message.
     */
    message_id: string;
    /**
     * Parent Message Id
     * ID of the parent message, if this message is a reply.
     */
    parent_message_id?: string | null;
    /**
     * Tool Id
     * ID of the tool that sent the message, if applicable.
     */
    tool_id?: string | null;
    /**
     * Tool Result
     * Result of the tool used to generate the message, if applicable.
     */
    tool_result?: string | null;
    /**
     * Role
     * Role of the message sender, e.g., 'user' or 'assistant'.
     */
    role: 'user' | 'assistant';
    /**
     * Content of the message.
     */
    content: Content;
    /**
     * The deployment id of model used to generate the message.
     */
    llm: LlmModel | null;
    /**
     * Created At
     * Creation timestamp of the message.
     */
    created_at: string;
    /**
     * Updated At
     * Last updated timestamp of the message.
     */
    updated_at: string;
};

/**
 * PostFileUploadResponse
 * POST /api/v1/file/upload Response model
 */
export type PostFileUploadResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * File Id
     * ID of the uploaded file.
     */
    file_id: string;
};

/**
 * PostGenerateCompletionRequest
 * POST /api/v1/completion Request model
 */
export type PostGenerateCompletionRequest = {
    /**
     * Action
     * Action to be performed for the completion request, e.g., 'next', 'retry', or 'variant'.
     */
    action: 'next' | 'retry' | 'variant';
    /**
     * Conversation Id
     * ID of the conversation for which the completion is requested.
     */
    conversation_id: string;
    /**
     * Parent Message Id
     * ID of the parent message for the completion request.
     */
    parent_message_id: string | null;
    /**
     * Model Deployment ID to be used for generating the completion.
     */
    llm: LlmModelRequest;
    /**
     * Tools
     * List of tools to be used for generating the completion.
     */
    tools: Array<ToolRequest>;
    /**
     * Messages
     * List of messages in the conversation for which the completion is requested.
     */
    messages: Array<MessageRequest>;
};

/**
 * PostPublishAgentRequest
 * POST /api/v1/agent/publish Request model
 */
export type PostPublishAgentRequest = {
    /**
     * Details of the agent to be published.
     */
    agent: AgentPublish;
};

/**
 * PostPublishAgentResponse
 * POST /api/v1/agent/publish Response model
 */
export type PostPublishAgentResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
};

/**
 * PostRecommendationCompletionRequest
 * POST /api/v1/recommendations/{recommendation_id}/completion Request model
 */
export type PostRecommendationCompletionRequest = {
    /**
     * Action
     * Action to be performed for the completion request, e.g., 'next', 'retry', or 'variant'.
     */
    action: 'next' | 'retry' | 'variant';
    /**
     * Conversation Id
     * ID of the conversation for which the completion is requested.
     */
    conversation_id: string;
    /**
     * Parent Message Id
     * ID of the parent message for the completion request.
     */
    parent_message_id: string | null;
    /**
     * Model Deployment ID to be used for generating the completion.
     */
    llm: LlmModelRequest;
    /**
     * Agent to be used for generating the completion.
     */
    agent: AgentRequest;
    /**
     * Messages
     * List of messages in the conversation for which the completion is requested.
     */
    messages: Array<MessageRequest>;
};

/**
 * PostRecommendationResponse
 * POST /api/v1/recommendations Response model
 */
export type PostRecommendationResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * Details of the created recommendation.
     */
    recommendation: Recommendation;
};

/**
 * PostRescommendationRequest
 * POST /api/v1/recommendations Request model
 */
export type PostRescommendationRequest = {
    /**
     * Work Details
     * Details of the recommendation to be created.
     */
    work_details: string;
};

/**
 * PostVectorizeFilesResponse
 */
export type PostVectorizeFilesResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
    /**
     * File Id
     * ID of the vectorized file.
     */
    file_id: string;
};

/**
 * PutModifyAgentRequest
 * POST /api/v1/agent/publish Request model
 */
export type PutModifyAgentRequest = {
    /**
     * Details of the agent to be published.
     */
    agent: AgentPublish;
};

/**
 * PutModifyAgentResponse
 * PUT /api/v1/agent/agent_id Response model
 */
export type PutModifyAgentResponse = {
    /**
     * Status
     * Status of the response, e.g., 'success' or 'error'.
     */
    status?: 'success' | 'error';
    /**
     * Message
     * Message providing additional information about the response.
     */
    message?: string;
    /**
     * Request Id
     * Unique identifier for the request, used for tracking and debugging.
     */
    request_id: string;
};

/**
 * Recommendation
 */
export type Recommendation = {
    /**
     * Recommendation Id
     * A unique identifier for the recommendation.
     */
    recommendation_id: string;
    /**
     * Work When
     * The date and time when the recommendation is intended to be worked on.
     */
    work_when: string;
    /**
     * Work Where
     * The location where the recommendation is intended to be worked on.
     */
    work_where: string;
    /**
     * Work Whom
     * The person or team with whom the recommendation is intended to be worked on.
     */
    work_whom: string;
    /**
     * Work Details
     * Detailed information about the work associated with the recommendation.
     */
    work_details: string;
    /**
     * Agents
     * List of agents associated with the recommendation.
     */
    agents?: Array<AgentRecommendation>;
};

/**
 * RecommendationMaster
 */
export type RecommendationMaster = {
    /**
     * Recommendation Id
     * A unique identifier for the recommendation.
     */
    recommendation_id: string;
    /**
     * Title
     * Title of the recommendation, unique across all recommendations.
     */
    title: string;
    /**
     * Description
     * A brief description of the recommendation's content.
     */
    description: string;
    /**
     * Created At
     * The date and time when the recommendation was created.
     */
    created_at?: string;
    /**
     * Updated At
     * The date and time when the recommendation was last updated.
     */
    updated_at?: string;
    /**
     * Departments
     * List of departments associated with the recommendation.
     */
    departments?: Array<string>;
};

/**
 * Tool
 */
export type Tool = {
    /**
     * Tool Id
     * Unique identifier for the tool.
     */
    tool_id: string;
    /**
     * Tool Name
     * Name of the tool.
     */
    tool_name: string;
    /**
     * Author Name
     * Name of the author who created the tool.
     */
    author_name: string;
    /**
     * Icon Link
     * Link to the icon representing the tool. It can be a URL or a path.
     */
    icon_link?: string | null;
    /**
     * Created At
     * Timestamp when the tool was created.
     */
    created_at?: string;
    /**
     * Updated At
     * Timestamp when the tool was last updated.
     */
    updated_at?: string;
    /**
     * Description
     * Description of the tool.
     */
    description: string;
};

/**
 * ToolMaster
 */
export type ToolMaster = {
    /**
     * Tool Id
     * Unique identifier for the tool.
     */
    tool_id: string;
    /**
     * Tool Name
     * Name of the tool.
     */
    tool_name: string;
    /**
     * Author Name
     * Name of the author who created the tool.
     */
    author_name: string;
    /**
     * Icon Link
     * Link to the icon representing the tool. It can be a URL or a path.
     */
    icon_link?: string | null;
    /**
     * Created At
     * Timestamp when the tool was created.
     */
    created_at?: string;
    /**
     * Updated At
     * Timestamp when the tool was last updated.
     */
    updated_at?: string;
};

/**
 * ToolRequest
 */
export type ToolRequest = {
    /**
     * Tool Id
     * Unique identifier for the tool.
     */
    tool_id: string;
};

/**
 * User
 */
export type User = {
    /**
     * User Id
     * Unique identifier of the user.
     */
    user_id: string;
    /**
     * Username
     * Username of the user.
     */
    username: string;
    /**
     * Email
     * Email address of the user, if available.
     */
    email?: string | null;
    /**
     * Icon Link
     * Link to the user's icon or avatar, if available.
     */
    icon_link?: string | null;
    /**
     * Is Superuser
     * Flag indicating whether the user has superuser privileges.
     */
    is_superuser?: boolean;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Successful Response
     */
    200: BaseResponse;
};

export type ReadRootGetResponse = ReadRootGetResponses[keyof ReadRootGetResponses];

export type GetMeApiV1UserGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user';
};

export type GetMeApiV1UserGetResponses = {
    /**
     * Successful Response
     */
    200: GetMeResponse;
};

export type GetMeApiV1UserGetResponse = GetMeApiV1UserGetResponses[keyof GetMeApiV1UserGetResponses];

export type GetToolsApiV1ToolsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search
         */
        search?: string | null;
        /**
         * Page
         */
        page?: number;
        /**
         * Size
         */
        size?: number;
    };
    url: '/api/v1/tools';
};

export type GetToolsApiV1ToolsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetToolsApiV1ToolsGetError = GetToolsApiV1ToolsGetErrors[keyof GetToolsApiV1ToolsGetErrors];

export type GetToolsApiV1ToolsGetResponses = {
    /**
     * Successful Response
     */
    200: GetToolsResponse;
};

export type GetToolsApiV1ToolsGetResponse = GetToolsApiV1ToolsGetResponses[keyof GetToolsApiV1ToolsGetResponses];

export type GetToolByIdApiV1ToolsToolIdGetData = {
    body?: never;
    path: {
        /**
         * Tool Id
         */
        tool_id: string;
    };
    query?: never;
    url: '/api/v1/tools/{tool_id}';
};

export type GetToolByIdApiV1ToolsToolIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetToolByIdApiV1ToolsToolIdGetError = GetToolByIdApiV1ToolsToolIdGetErrors[keyof GetToolByIdApiV1ToolsToolIdGetErrors];

export type GetToolByIdApiV1ToolsToolIdGetResponses = {
    /**
     * Successful Response
     */
    200: GetToolByIdResponse;
};

export type GetToolByIdApiV1ToolsToolIdGetResponse = GetToolByIdApiV1ToolsToolIdGetResponses[keyof GetToolByIdApiV1ToolsToolIdGetResponses];

export type NewConversationApiV1ConversationsNewPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/conversations/new';
};

export type NewConversationApiV1ConversationsNewPostResponses = {
    /**
     * Successful Response
     */
    200: CreateConversationResponse;
};

export type NewConversationApiV1ConversationsNewPostResponse = NewConversationApiV1ConversationsNewPostResponses[keyof NewConversationApiV1ConversationsNewPostResponses];

export type GetConversationsApiV1ConversationsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/conversations';
};

export type GetConversationsApiV1ConversationsGetResponses = {
    /**
     * Successful Response
     */
    200: GetConversationsResponse;
};

export type GetConversationsApiV1ConversationsGetResponse = GetConversationsApiV1ConversationsGetResponses[keyof GetConversationsApiV1ConversationsGetResponses];

export type GetConversationApiV1ConversationsConversationIdGetData = {
    body?: never;
    path: {
        /**
         * Conversation Id
         */
        conversation_id: string;
    };
    query?: never;
    url: '/api/v1/conversations/{conversation_id}';
};

export type GetConversationApiV1ConversationsConversationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConversationApiV1ConversationsConversationIdGetError = GetConversationApiV1ConversationsConversationIdGetErrors[keyof GetConversationApiV1ConversationsConversationIdGetErrors];

export type GetConversationApiV1ConversationsConversationIdGetResponses = {
    /**
     * Successful Response
     */
    200: GetConversationResponse;
};

export type GetConversationApiV1ConversationsConversationIdGetResponse = GetConversationApiV1ConversationsConversationIdGetResponses[keyof GetConversationApiV1ConversationsConversationIdGetResponses];

export type GenerateCompletionApiV1CompletionPostData = {
    body: PostGenerateCompletionRequest;
    path?: never;
    query?: never;
    url: '/api/v1/completion';
};

export type GenerateCompletionApiV1CompletionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateCompletionApiV1CompletionPostError = GenerateCompletionApiV1CompletionPostErrors[keyof GenerateCompletionApiV1CompletionPostErrors];

export type GenerateCompletionApiV1CompletionPostResponses = {
    /**
     * Streaming response containing the generated completion.
     */
    200: string;
};

export type GenerateCompletionApiV1CompletionPostResponse = GenerateCompletionApiV1CompletionPostResponses[keyof GenerateCompletionApiV1CompletionPostResponses];

export type UploadFileApiV1FilesUploadPostData = {
    body: BodyUploadFileApiV1FilesUploadPost;
    path?: never;
    query?: never;
    url: '/api/v1/files/upload';
};

export type UploadFileApiV1FilesUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileApiV1FilesUploadPostError = UploadFileApiV1FilesUploadPostErrors[keyof UploadFileApiV1FilesUploadPostErrors];

export type UploadFileApiV1FilesUploadPostResponses = {
    /**
     * Successful Response
     */
    200: PostFileUploadResponse;
};

export type UploadFileApiV1FilesUploadPostResponse = UploadFileApiV1FilesUploadPostResponses[keyof UploadFileApiV1FilesUploadPostResponses];

export type GetFilesApiV1FilesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/files';
};

export type GetFilesApiV1FilesGetResponses = {
    /**
     * Successful Response
     */
    200: GetFilesResponse;
};

export type GetFilesApiV1FilesGetResponse = GetFilesApiV1FilesGetResponses[keyof GetFilesApiV1FilesGetResponses];

export type VectorizeFilesApiV1FilesFileIdVectorizePostData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: never;
    url: '/api/v1/files/{file_id}/vectorize';
};

export type VectorizeFilesApiV1FilesFileIdVectorizePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VectorizeFilesApiV1FilesFileIdVectorizePostError = VectorizeFilesApiV1FilesFileIdVectorizePostErrors[keyof VectorizeFilesApiV1FilesFileIdVectorizePostErrors];

export type VectorizeFilesApiV1FilesFileIdVectorizePostResponses = {
    /**
     * Successful Response
     */
    200: PostVectorizeFilesResponse;
};

export type VectorizeFilesApiV1FilesFileIdVectorizePostResponse = VectorizeFilesApiV1FilesFileIdVectorizePostResponses[keyof VectorizeFilesApiV1FilesFileIdVectorizePostResponses];

export type DeleteFileApiV1FilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: never;
    url: '/api/v1/files/{file_id}';
};

export type DeleteFileApiV1FilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFileApiV1FilesFileIdDeleteError = DeleteFileApiV1FilesFileIdDeleteErrors[keyof DeleteFileApiV1FilesFileIdDeleteErrors];

export type DeleteFileApiV1FilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: DeleteFilesByIdResponse;
};

export type DeleteFileApiV1FilesFileIdDeleteResponse = DeleteFileApiV1FilesFileIdDeleteResponses[keyof DeleteFileApiV1FilesFileIdDeleteResponses];

export type GetAvailableAgentsApiV1AgentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search
         */
        search?: string | null;
        /**
         * Page
         */
        page?: number;
        /**
         * Size
         */
        size?: number;
    };
    url: '/api/v1/agents';
};

export type GetAvailableAgentsApiV1AgentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAvailableAgentsApiV1AgentsGetError = GetAvailableAgentsApiV1AgentsGetErrors[keyof GetAvailableAgentsApiV1AgentsGetErrors];

export type GetAvailableAgentsApiV1AgentsGetResponses = {
    /**
     * Successful Response
     */
    200: GetAvailableAgentsResponse;
};

export type GetAvailableAgentsApiV1AgentsGetResponse = GetAvailableAgentsApiV1AgentsGetResponses[keyof GetAvailableAgentsApiV1AgentsGetResponses];

export type GetAgentApiV1AgentsAgentIdVersionAgentVersionGetData = {
    body?: never;
    path: {
        /**
         * Agent Id
         */
        agent_id: string;
        /**
         * Agent Version
         */
        agent_version: number;
    };
    query?: never;
    url: '/api/v1/agents/{agent_id}/version/{agent_version}';
};

export type GetAgentApiV1AgentsAgentIdVersionAgentVersionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAgentApiV1AgentsAgentIdVersionAgentVersionGetError = GetAgentApiV1AgentsAgentIdVersionAgentVersionGetErrors[keyof GetAgentApiV1AgentsAgentIdVersionAgentVersionGetErrors];

export type GetAgentApiV1AgentsAgentIdVersionAgentVersionGetResponses = {
    /**
     * Successful Response
     */
    200: GetAgentResponse;
};

export type GetAgentApiV1AgentsAgentIdVersionAgentVersionGetResponse = GetAgentApiV1AgentsAgentIdVersionAgentVersionGetResponses[keyof GetAgentApiV1AgentsAgentIdVersionAgentVersionGetResponses];

export type PublishAgentApiV1AgentsPublishPostData = {
    body: PostPublishAgentRequest;
    path?: never;
    query?: never;
    url: '/api/v1/agents/publish';
};

export type PublishAgentApiV1AgentsPublishPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PublishAgentApiV1AgentsPublishPostError = PublishAgentApiV1AgentsPublishPostErrors[keyof PublishAgentApiV1AgentsPublishPostErrors];

export type PublishAgentApiV1AgentsPublishPostResponses = {
    /**
     * Successful Response
     */
    200: PostPublishAgentResponse;
};

export type PublishAgentApiV1AgentsPublishPostResponse = PublishAgentApiV1AgentsPublishPostResponses[keyof PublishAgentApiV1AgentsPublishPostResponses];

export type ModifyAgentApiV1AgentsAgentIdPutData = {
    body: PutModifyAgentRequest;
    path: {
        /**
         * Agent Id
         */
        agent_id: string;
    };
    query?: never;
    url: '/api/v1/agents/{agent_id}';
};

export type ModifyAgentApiV1AgentsAgentIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModifyAgentApiV1AgentsAgentIdPutError = ModifyAgentApiV1AgentsAgentIdPutErrors[keyof ModifyAgentApiV1AgentsAgentIdPutErrors];

export type ModifyAgentApiV1AgentsAgentIdPutResponses = {
    /**
     * Successful Response
     */
    200: PutModifyAgentResponse;
};

export type ModifyAgentApiV1AgentsAgentIdPutResponse = ModifyAgentApiV1AgentsAgentIdPutResponses[keyof ModifyAgentApiV1AgentsAgentIdPutResponses];

export type GetRecommendationsApiV1RecommendationsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/recommendations';
};

export type GetRecommendationsApiV1RecommendationsGetResponses = {
    /**
     * Successful Response
     */
    200: GetRecommendationsResponse;
};

export type GetRecommendationsApiV1RecommendationsGetResponse = GetRecommendationsApiV1RecommendationsGetResponses[keyof GetRecommendationsApiV1RecommendationsGetResponses];

export type CreateRecommendationApiV1RecommendationsPostData = {
    body: PostRescommendationRequest;
    path?: never;
    query?: never;
    url: '/api/v1/recommendations';
};

export type CreateRecommendationApiV1RecommendationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRecommendationApiV1RecommendationsPostError = CreateRecommendationApiV1RecommendationsPostErrors[keyof CreateRecommendationApiV1RecommendationsPostErrors];

export type CreateRecommendationApiV1RecommendationsPostResponses = {
    /**
     * Successful Response
     */
    200: PostRecommendationResponse;
};

export type CreateRecommendationApiV1RecommendationsPostResponse = CreateRecommendationApiV1RecommendationsPostResponses[keyof CreateRecommendationApiV1RecommendationsPostResponses];

export type DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteData = {
    body?: never;
    path: {
        /**
         * Recommendation Id
         */
        recommendation_id: string;
    };
    query?: never;
    url: '/api/v1/recommendations/{recommendation_id}';
};

export type DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteError = DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteErrors[keyof DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteErrors];

export type DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: DeleteRecommendationResponse;
};

export type DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteResponse = DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteResponses[keyof DeleteRecommendationApiV1RecommendationsRecommendationIdDeleteResponses];

export type GetRecommendationByIdApiV1RecommendationsRecommendationIdGetData = {
    body?: never;
    path: {
        /**
         * Recommendation Id
         */
        recommendation_id: string;
    };
    query?: never;
    url: '/api/v1/recommendations/{recommendation_id}';
};

export type GetRecommendationByIdApiV1RecommendationsRecommendationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRecommendationByIdApiV1RecommendationsRecommendationIdGetError = GetRecommendationByIdApiV1RecommendationsRecommendationIdGetErrors[keyof GetRecommendationByIdApiV1RecommendationsRecommendationIdGetErrors];

export type GetRecommendationByIdApiV1RecommendationsRecommendationIdGetResponses = {
    /**
     * Successful Response
     */
    200: GetRecommendationByIdResponse;
};

export type GetRecommendationByIdApiV1RecommendationsRecommendationIdGetResponse = GetRecommendationByIdApiV1RecommendationsRecommendationIdGetResponses[keyof GetRecommendationByIdApiV1RecommendationsRecommendationIdGetResponses];

export type ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostData = {
    body: PostRecommendationCompletionRequest;
    path: {
        /**
         * Recommendation Id
         */
        recommendation_id: string;
    };
    query?: never;
    url: '/api/v1/recommendations/{recommendation_id}/completion';
};

export type ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostError = ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostErrors[keyof ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostErrors];

export type ChatCompletionWithAgentApiV1RecommendationsRecommendationIdCompletionPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetData = {
    body?: never;
    path: {
        /**
         * Recommendation Id
         */
        recommendation_id: string;
    };
    query: {
        /**
         * Agent Id
         */
        agent_id: string;
        /**
         * Agent Version
         */
        agent_version?: number;
    };
    url: '/api/v1/recommendations/{recommendation_id}/conversations';
};

export type GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetError = GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetErrors[keyof GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetErrors];

export type GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetResponses = {
    /**
     * Successful Response
     */
    200: GetConversationResponse;
};

export type GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetResponse = GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetResponses[keyof GetConversationByRecommendationApiV1RecommendationsRecommendationIdConversationsGetResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};